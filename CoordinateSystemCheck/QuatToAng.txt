// 四元数转欧拉角
inline Point3D_t QuatToAng(RotateOrders rotateOrder, QUATERNION_t quat)
{
	//Quart: 四元数 [x,y,z,w]
	//设地理系为t（tx，ty,tz）

	double w = quat.qs;
	double x0 = quat.qy;
	double y0 = quat.qz;
	double z0 = quat.qx;
	//设t'系为（tx'，ty',tz'）=（ty，tz,tx）
	// ZYX欧拉角 -> YZX欧拉角

	int Flag = 1;

	double x(0),y(0),z(0);
	if(rotateOrder == RO_XZY)      // 正确
	{	//t'系
		x = x0;
		y = y0;
		z = z0;  // XZY  验证OK
	}
	else if(rotateOrder == RO_YXZ) // 正确
	{
		x = y0;	// x = qz ;
        y = z0;	// y = qx ;
        z = x0;	// z = qy ;   // 验证OK
	}
	else if(rotateOrder == RO_XYZ) // 错误
	{
		x = x0;
		y = -z0;
		z = y0; 

		//xyz
		x = -quat.qz;
		y = quat.qy;
		z = quat.qx;
		Flag = -1;
	}
	else if(rotateOrder == RO_YZX) // 错误
	{
		x = y0;
		y = -x0;
		z = z0; 

		//xyz
		x = -z0; 
		y = y0;
		z = x0;
		Flag = -1;
	}
	else if(rotateOrder == RO_ZXY) // 错误
	{
		x = z0;
		y = -y0;
		z = x0; 

		//xyz
		x = -quat.qy;
		y = quat.qx;
		z = quat.qz;
		Flag = -1;
	}
	else if(rotateOrder == RO_ZYX) // 正确
	{
		x = z0; // x = qx ;
		y = x0; // y = qy ;
		z = y0; // z = qz ;  // OK
	}
	else
	{
		printf("unknown order\n");
	}
	
	// 四元数->ZYX欧拉角 转换公式
	double asinValue = 2*(w*y-z*x);
	if(asinValue>1) asinValue = 1;
	if(asinValue<-1) asinValue = -1;
	
	double angX = atan2(2*(w*z+x*y),(1-2*(y*y+z*z)))*PIdiv;		//第一个旋转角（绕Z的转角）
	double angZ = asin(asinValue)*PIdiv;						//第二个旋转角（绕Y的转角）		
	double angY = atan2(2 * (w*x + y*z)*Flag, (1 - 2 * (x*x + y*y)))*PIdiv;		//第三个旋转角（绕X的转角）

	return Point3D_t(angX, angZ, angY);
}